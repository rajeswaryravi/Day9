import React, { Component } from "react";

export const doIncrement = prevState => ({

  counter: prevState.counter + 1

});

export const doDecrement = prevState => ({

  counter: prevState.counter - 1

});

class App extends Component {

  constructor() {

    super();

    this.state = {

      counter: 0

    };

    this.onIncrement = this.onIncrement.bind(this);

    this.onDecrement = this.onDecrement.bind(this);

  }

  onIncrement() {

    this.setState(doIncrement);

  }

  onDecrement() {

    this.setState(doDecrement);

  }

  render() {

    const { counter } = this.state;

    return (<div><h4>My Counter</h4><Counter counter={counter} /><button type="button" className="increment" onClick={this.onIncrement}>

          Increment</button>&nbsp;<button type="button" className="decrement" onClick={this.onDecrement}>

          Decrement</button></div>

    );

  }

}

export const Counter = ({ counter }) => <p>{counter}</p>;

export default App;


Highlights:Testing functionality with JestUsing MatchersDemo 
steps:
Step 1:Go to the counter app created in previous demo.
Open src/App.test.js file and import doIncrement and doDecrement. 

import { doDecrement, doIncrement } from "./App";

You need to import to use in App.test.js file.

 Step 2:Create test case for doIncrement and doDecrement as shown below:
 describe('Increment and Decrement functions', ()=> {
 test('should increment the counter in state', () => { 
const state = { counter: 0 }; 
const newState = doIncrement(state); 
expect(newState.counter).toEqual(1); 
});  
test('should decrement the counter in state', () => {
 const state = { counter: 0 }; 
const newState = doDecrement(state); 
expect(newState.counter).toEqual(-1); 
});
});

These test cases will check that increment and decrement functions are 
working properly. 
Step 3:Open terminal and type below 

command: npm test

It will run the above test cases and display 
output as below: We have successfully run test cases to test functions
 which are isolated from Component. 
Next, we will see how to test React component.